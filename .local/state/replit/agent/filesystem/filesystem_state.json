{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nSecureShare is a passwordless file sharing application that leverages WebAuthn biometric authentication for secure, modern user authentication. The application provides a complete file upload, management, and sharing platform with role-based access control, built using a modern full-stack architecture with React frontend and Express backend.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with CSS custom properties for theming\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Form Handling**: React Hook Form with Zod validation for type-safe forms\n- **Build Tool**: Vite for fast development and optimized production builds\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript for the REST API server\n- **Authentication**: WebAuthn implementation using @simplewebauthn/server for passwordless biometric authentication\n- **Session Management**: JWT tokens for stateless authentication\n- **File Storage**: Multer for handling multipart file uploads with local filesystem storage\n- **API Design**: RESTful endpoints with consistent error handling and logging middleware\n\n## Data Storage Solutions\n- **Database**: PostgreSQL configured through Drizzle ORM\n- **Schema Management**: Drizzle Kit for database migrations and schema management\n- **Connection**: Neon Database serverless PostgreSQL for cloud deployment\n- **Storage Pattern**: Repository pattern implemented through IStorage interface with both memory and database implementations\n- **File Storage**: Local filesystem storage in uploads directory with metadata tracked in database\n\n## Authentication and Authorization\n- **Primary Method**: WebAuthn (Web Authentication API) for passwordless authentication using biometrics, security keys, or device authentication\n- **Backup Authentication**: JWT tokens for session management after WebAuthn verification\n- **Role-Based Access**: Two-tier role system (admin/user) with different permission levels\n- **Security Features**: Credential counter tracking for replay attack prevention, challenge-response authentication flow\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@neondatabase/serverless**: Serverless PostgreSQL database connection for cloud deployment\n- **drizzle-orm**: TypeScript ORM for database operations and query building\n- **@simplewebauthn/server**: Server-side WebAuthn implementation for biometric authentication\n- **@simplewebauthn/browser**: Client-side WebAuthn implementation\n- **jsonwebtoken**: JWT token generation and verification for session management\n\n### UI and Frontend Libraries\n- **@radix-ui/***: Comprehensive set of accessible UI primitives for building the component system\n- **@tanstack/react-query**: Server state management and data fetching with caching\n- **react-hook-form**: Form state management and validation\n- **@hookform/resolvers**: Integration between React Hook Form and validation libraries\n- **wouter**: Lightweight routing solution for single-page application navigation\n\n### Development and Build Tools\n- **vite**: Modern build tool and development server\n- **@vitejs/plugin-react**: React integration for Vite\n- **typescript**: Type checking and enhanced developer experience\n- **tailwindcss**: Utility-first CSS framework for styling\n- **@replit/vite-plugin-runtime-error-modal**: Development error handling for Replit environment\n\n### File Handling and Utilities\n- **multer**: Middleware for handling multipart/form-data file uploads\n- **react-dropzone**: Drag-and-drop file upload interface\n- **date-fns**: Date manipulation and formatting utilities\n- **clsx** and **tailwind-merge**: Utility functions for conditional CSS class names","size_bytes":4017},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/crypto.ts":{"content":"import crypto from \"crypto\";\nimport forge from \"node-forge\";\n\nexport class PromiseCrypto {\n  // Generate RSA key pair for promise encryption\n  static generateKeyPair(): { publicKey: string; privateKey: string } {\n    const keyPair = forge.pki.rsa.generateKeyPair(2048);\n    const publicKeyPem = forge.pki.publicKeyToPem(keyPair.publicKey);\n    const privateKeyPem = forge.pki.privateKeyToPem(keyPair.privateKey);\n    \n    return {\n      publicKey: publicKeyPem,\n      privateKey: privateKeyPem\n    };\n  }\n\n  // Encrypt promise data with content + private key + fingerprint\n  static encryptPromise(\n    content: string,\n    privateKey: string,\n    fingerprintData: string\n  ): string {\n    const combinedData = JSON.stringify({\n      content,\n      privateKey,\n      fingerprint: fingerprintData,\n      timestamp: Date.now()\n    });\n\n    // Use AES-256-GCM for symmetric encryption\n    const key = crypto.randomBytes(32);\n    const iv = crypto.randomBytes(16);\n    const cipher = crypto.createCipheriv('aes-256-gcm', key, iv);\n    cipher.setAAD(Buffer.from('promiseshare-auth'));\n    \n    let encrypted = cipher.update(combinedData, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    \n    const authTag = cipher.getAuthTag();\n    \n    // Combine key, iv, authTag, and encrypted data\n    const encryptedPackage = {\n      key: key.toString('hex'),\n      iv: iv.toString('hex'),\n      authTag: authTag.toString('hex'),\n      encrypted\n    };\n\n    return Buffer.from(JSON.stringify(encryptedPackage)).toString('base64');\n  }\n\n  // Decrypt promise data\n  static decryptPromise(encryptedData: string): {\n    content: string;\n    privateKey: string;\n    fingerprint: string;\n    timestamp: number;\n  } {\n    try {\n      const encryptedPackage = JSON.parse(\n        Buffer.from(encryptedData, 'base64').toString('utf8')\n      );\n\n      const key = Buffer.from(encryptedPackage.key, 'hex');\n      const iv = Buffer.from(encryptedPackage.iv, 'hex');\n      const authTag = Buffer.from(encryptedPackage.authTag, 'hex');\n\n      const decipher = crypto.createDecipheriv('aes-256-gcm', key, iv);\n      decipher.setAAD(Buffer.from('promiseshare-auth'));\n      decipher.setAuthTag(authTag);\n\n      let decrypted = decipher.update(encryptedPackage.encrypted, 'hex', 'utf8');\n      decrypted += decipher.final('utf8');\n\n      return JSON.parse(decrypted);\n    } catch (error) {\n      throw new Error('Failed to decrypt promise data');\n    }\n  }\n\n  // Generate certificate for promise validation\n  static generateCertificate(\n    promiseId: string,\n    publicKey: string,\n    creatorFingerprint: string\n  ): string {\n    const certificateData = {\n      promiseId,\n      publicKey,\n      creatorFingerprint,\n      issuedAt: Date.now(),\n      issuer: 'PromiseShare Authority'\n    };\n\n    // Use HMAC for certificate signing instead of RSA (simpler and more reliable)\n    const hmacKey = crypto.createHash('sha256').update('promiseshare-cert-authority').digest();\n    const hmac = crypto.createHmac('sha256', hmacKey);\n    hmac.update(JSON.stringify(certificateData));\n    const signature = hmac.digest('hex');\n    \n    return Buffer.from(JSON.stringify({\n      data: certificateData,\n      signature\n    })).toString('base64');\n  }\n\n  // Validate certificate\n  static validateCertificate(certificate: string, publicKey: string): boolean {\n    try {\n      const cert = JSON.parse(\n        Buffer.from(certificate, 'base64').toString('utf8')\n      );\n\n      // Validate HMAC signature\n      const hmacKey = crypto.createHash('sha256').update('promiseshare-cert-authority').digest();\n      const hmac = crypto.createHmac('sha256', hmacKey);\n      hmac.update(JSON.stringify(cert.data));\n      const expectedSignature = hmac.digest('hex');\n      \n      return cert.signature === expectedSignature;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  // Hash fingerprint data for storage\n  static hashFingerprint(fingerprintData: string): string {\n    return crypto.createHash('sha256').update(fingerprintData).digest('hex');\n  }\n}","size_bytes":4013},"server/db.ts":{"content":"import { PrismaClient } from \"@prisma/client\";\n\ndeclare global {\n  var __prisma: PrismaClient | undefined;\n}\n\nexport const db = globalThis.__prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") {\n  globalThis.__prisma = db;\n}","size_bytes":246},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Add WebAuthn permissions policy headers\napp.use((req, res, next) => {\n  // Enable WebAuthn permissions\n  res.setHeader('Permissions-Policy', 'publickey-credentials-create=*, publickey-credentials-get=*');\n  \n  // Add CORS headers for development\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n  \n  // Handle preflight requests\n  if (req.method === 'OPTIONS') {\n    res.status(200).end();\n    return;\n  }\n  \n  next();\n});\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2661},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { db } from \"./db\";\nimport { PromiseCrypto } from \"./crypto\";\nimport { WebAuthnPromiseService } from \"./webauthn-promise\";\nimport { registerUser, loginUser, authenticateJWT } from \"./auth\";\nimport crypto from \"crypto\";\nimport { insertUserSchema, insertPromiseSchema, promiseShareSchema } from \"@shared/schema\";\nimport { generateAuthenticationOptions, generateRegistrationOptions, verifyAuthenticationResponse, verifyRegistrationResponse } from \"@simplewebauthn/server\";\nimport type { VerifiedAuthenticationResponse, VerifiedRegistrationResponse } from \"@simplewebauthn/server\";\n\n// WebAuthn configuration\nconst RP_NAME = \"SecureShare\";\nconst RP_ID = \"localhost\";\nconst ORIGIN = \"http://localhost:5000\";\n\n// In-memory challenge storage\nconst challenges = new Map<string, string>();\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Password-based registration\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      console.log(\"Registration request:\", { username, password: \"***\" });\n      \n      const result = await registerUser(username, password);\n      console.log(\"Registration successful:\", { userId: result.user.id, username: result.user.username });\n      \n      res.json(result);\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Registration failed\" });\n    }\n  });\n\n  // Password-based login\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      console.log(\"Login request:\", { username, password: \"***\" });\n      \n      const result = await loginUser(username, password);\n      console.log(\"Login successful:\", { userId: result.user.id, username: result.user.username });\n      \n      res.json(result);\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Login failed\" });\n    }\n  });\n\n  // Get current user\n  app.get(\"/api/auth/me\", authenticateJWT, async (req: any, res) => {\n    try {\n      const user = await db.user.findUnique({\n        where: { id: req.user.id },\n        select: { id: true, username: true, createdAt: true }\n      });\n      \n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      res.json({ user });\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ error: \"Failed to get user\" });\n    }\n  });\n\n  // Get all users\n  app.get(\"/api/users\", authenticateJWT, async (req: any, res) => {\n    try {\n      const users = await db.user.findMany({\n        select: { id: true, username: true, createdAt: true },\n        orderBy: { createdAt: 'desc' }\n      });\n      \n      res.json({ users });\n    } catch (error) {\n      console.error(\"Get users error:\", error);\n      res.status(500).json({ error: \"Failed to get users\" });\n    }\n  });\n\n  // WebAuthn Registration for existing users\n  app.post(\"/api/auth/webauthn/register\", authenticateJWT, async (req: any, res) => {\n    try {\n      const user = await db.user.findUnique({\n        where: { id: req.user.id }\n      });\n      \n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      // Check if user already has credentials\n      const existingCredentials = await db.credential.findMany({\n        where: { userId: user.id }\n      });\n      \n      if (existingCredentials.length > 0) {\n        return res.json({ success: true, message: \"WebAuthn already registered\" });\n      }\n      \n      const options = await generateRegistrationOptions({\n        rpName: RP_NAME,\n        rpID: RP_ID,\n        userID: new TextEncoder().encode(user.username),\n        userName: user.username,\n        userDisplayName: user.username,\n        attestationType: \"none\",\n        authenticatorSelection: {\n          authenticatorAttachment: \"platform\",\n          userVerification: \"required\",\n        },\n        supportedAlgorithmIDs: [-7, -257],\n      });\n      \n      // Store challenge\n      challenges.set(`${req.user.id}_register`, options.challenge);\n      \n      res.json(options);\n    } catch (error) {\n      console.error(\"WebAuthn registration error:\", error);\n      res.status(400).json({ error: \"Failed to start WebAuthn registration\" });\n    }\n  });\n\n  // WebAuthn Registration Verification\n  app.post(\"/api/auth/webauthn/register/verify\", authenticateJWT, async (req: any, res) => {\n    try {\n      const { credential } = req.body;\n      \n      const expectedChallenge = challenges.get(`${req.user.id}_register`);\n      if (!expectedChallenge) {\n        return res.status(400).json({ error: \"No challenge found for user\" });\n      }\n      \n      const verification: VerifiedRegistrationResponse = await verifyRegistrationResponse({\n        response: credential,\n        expectedChallenge,\n        expectedOrigin: ORIGIN,\n        expectedRPID: RP_ID,\n      });\n      \n      if (verification.verified && verification.registrationInfo) {\n        // Store credential\n        await db.credential.create({\n          data: {\n            id: verification.registrationInfo.credential.id,\n            userId: req.user.id,\n            publicKey: Buffer.from(verification.registrationInfo.credential.publicKey).toString('base64'),\n            counter: verification.registrationInfo.credential.counter,\n          }\n        });\n        \n        // Clean up challenge\n        challenges.delete(`${req.user.id}_register`);\n        \n        res.json({ verified: true, message: \"WebAuthn registration successful\" });\n      } else {\n        res.status(400).json({ error: \"Registration verification failed\" });\n      }\n    } catch (error) {\n      console.error(\"WebAuthn registration verification error:\", error);\n      res.status(400).json({ error: \"Registration verification failed\" });\n    }\n  });\n\n  // WebAuthn Authentication Options (for promise signing)\n  app.post(\"/api/auth/webauthn/authenticate/begin\", authenticateJWT, async (req: any, res) => {\n    try {\n      const { username } = req.body;\n      \n      const user = await db.user.findUnique({\n        where: { username }\n      });\n      \n      if (!user) {\n        return res.status(400).json({ error: \"User not found\" });\n      }\n      \n      const userCredentials = await db.credential.findMany({\n        where: { userId: user.id }\n      });\n      \n      const allowCredentials = userCredentials.map(cred => ({\n        id: cred.id,\n        type: \"public-key\" as const,\n      }));\n      \n      const options = await generateAuthenticationOptions({\n        rpID: RP_ID,\n        allowCredentials,\n        userVerification: \"required\",\n      });\n      \n      // Store challenge for this user session\n      challenges.set(`${req.user.id}_auth`, options.challenge);\n      \n      res.json(options);\n    } catch (error) {\n      console.error(\"WebAuthn auth options error:\", error);\n      res.status(400).json({ error: \"Failed to generate authentication options\" });\n    }\n  });\n\n  // WebAuthn Authentication Verification (for promise signing)\n  app.post(\"/api/auth/webauthn/authenticate/verify\", authenticateJWT, async (req: any, res) => {\n    try {\n      const { credential } = req.body;\n      \n      const expectedChallenge = challenges.get(`${req.user.id}_auth`);\n      if (!expectedChallenge) {\n        return res.status(400).json({ error: \"No challenge found for user\" });\n      }\n      \n      const dbCredential = await db.credential.findUnique({\n        where: { id: credential.id }\n      });\n      \n      if (!dbCredential || dbCredential.userId !== req.user.id) {\n        return res.status(400).json({ error: \"Credential not found\" });\n      }\n      \n      const verification: VerifiedAuthenticationResponse = await verifyAuthenticationResponse({\n        response: credential,\n        expectedChallenge,\n        expectedOrigin: ORIGIN,\n        expectedRPID: RP_ID,\n        credential: {\n          id: dbCredential.id,\n          publicKey: Buffer.from(dbCredential.publicKey, 'base64'),\n          counter: dbCredential.counter,\n        },\n      });\n      \n      if (verification.verified) {\n        // Update counter\n        await db.credential.update({\n          where: { id: dbCredential.id },\n          data: { counter: verification.authenticationInfo.newCounter }\n        });\n        \n        // Clean up challenge\n        challenges.delete(`${req.user.id}_auth`);\n        \n        // Return fingerprint data for promise creation\n        res.json({ \n          verified: true,\n          fingerprintData: credential.response.signature,\n          credentialId: dbCredential.id,\n          publicKey: dbCredential.publicKey,\n          webauthnCredential: credential\n        });\n      } else {\n        res.status(400).json({ error: \"Authentication verification failed\" });\n      }\n    } catch (error) {\n      console.error(\"WebAuthn auth verification error:\", error);\n      res.status(400).json({ error: \"Authentication verification failed\" });\n    }\n  });\n\n  // Get user credentials\n  app.get(\"/api/auth/credentials\", authenticateJWT, async (req: any, res) => {\n    try {\n      const credentials = await db.credential.findMany({\n        where: { userId: req.user.id },\n        select: { id: true, publicKey: true, counter: true, createdAt: true }\n      });\n      \n      res.json({ credentials });\n    } catch (error) {\n      console.error(\"Get credentials error:\", error);\n      res.status(500).json({ error: \"Failed to get credentials\" });\n    }\n  });\n\n  // Create Promise (now requires WebAuthn fingerprint)\n  app.post(\"/api/promises\", authenticateJWT, async (req: any, res) => {\n    try {\n      const { promiseData, fingerprintData, credentialId } = req.body;\n      \n      if (!fingerprintData || !credentialId) {\n        return res.status(400).json({ error: \"WebAuthn fingerprint data and credential ID are required for promise creation\" });\n      }\n      \n      const validatedData = insertPromiseSchema.parse(promiseData);\n      console.log(\"Promise creation request with WebAuthn:\", JSON.stringify(validatedData, null, 2));\n      \n      // Generate RSA key pair for this promise\n      const keyPair = crypto.generateKeyPairSync('rsa', {\n        modulusLength: 2048,\n        publicKeyEncoding: { type: 'pkcs1', format: 'pem' },\n        privateKeyEncoding: { type: 'pkcs1', format: 'pem' }\n      });\n\n      // Store credential ID instead of hashed fingerprint for validation\n      const hashedFingerprint = PromiseCrypto.hashFingerprint(credentialId);\n\n      // Encrypt promise with content + private key + fingerprint\n      const encryptedData = PromiseCrypto.encryptPromise(\n        validatedData.content,\n        keyPair.privateKey,\n        fingerprintData\n      );\n      \n      const promise = await db.promise.create({\n        data: {\n          title: validatedData.title,\n          content: validatedData.content,\n          metadata: validatedData.metadata,\n          encryptedData,\n          fingerprint: hashedFingerprint,\n          credentialId,\n          deliveryDate: validatedData.deliveryDate,\n          recipientId: validatedData.recipientId,\n          creatorId: req.user.id,\n        },\n        include: {\n          creator: {\n            select: { id: true, username: true }\n          },\n          recipient: {\n            select: { id: true, username: true }\n          },\n        }\n      });\n      \n      console.log(\"Promise created successfully:\", JSON.stringify({\n        id: promise.id,\n        title: promise.title,\n        creator: promise.creator.username,\n        recipient: promise.recipient?.username\n      }, null, 2));\n\n      // Generate certificate\n      const certificate = PromiseCrypto.generateCertificate(\n        promise.id,\n        keyPair.publicKey,\n        hashedFingerprint\n      );\n      \n      await db.promiseCertificate.create({\n        data: {\n          promiseId: promise.id,\n          certificate,\n          publicKey: keyPair.publicKey,\n        }\n      });\n      \n      res.json({ \n        promise, \n        certificate,\n        message: \"Promise created successfully with WebAuthn fingerprint authentication!\"\n      });\n    } catch (error) {\n      console.error(\"Promise creation error:\", error);\n      res.status(400).json({ error: \"Failed to create promise\" });\n    }\n  });\n\n  // Share Promise\n  app.post(\"/api/promises/:id/share\", authenticateJWT, async (req: any, res) => {\n    try {\n      const promiseId = req.params.id;\n      const { userIds } = req.body;\n      \n      if (!userIds || !Array.isArray(userIds)) {\n        return res.status(400).json({ error: \"userIds array is required\" });\n      }\n      \n      // Check if promise exists and user owns it\n      const promise = await db.promise.findFirst({\n        where: {\n          id: promiseId,\n          creatorId: req.user.id,\n        }\n      });\n      \n      if (!promise) {\n        return res.status(404).json({ error: \"Promise not found or access denied\" });\n      }\n      \n      // Create shares for each user\n      const shares = await Promise.all(\n        userIds.map(userId =>\n          db.promiseShare.upsert({\n            where: {\n              promiseId_userId: {\n                promiseId,\n                userId,\n              }\n            },\n            update: {},\n            create: {\n              promiseId,\n              userId,\n              canValidate: true,\n            }\n          })\n        )\n      );\n      \n      res.json({ shares });\n    } catch (error) {\n      console.error(\"Promise share error:\", error);\n      res.status(400).json({ error: \"Failed to share promise\" });\n    }\n  });\n\n  // Sign Promise with WebAuthn (for downloadable file)\n  app.post(\"/api/promises/:id/sign\", authenticateJWT, async (req: any, res) => {\n    try {\n      const promiseId = req.params.id;\n      const { signature, publicKey } = req.body;\n\n      // Get promise with creator details\n      const promise = await db.promise.findFirst({\n        where: {\n          id: promiseId,\n          creatorId: req.user.id,\n        },\n        include: {\n          creator: true,\n        }\n      });\n\n      if (!promise) {\n        return res.status(404).json({ error: \"Promise not found or access denied\" });\n      }\n\n      // Generate challenge for this specific promise\n      const challenge = WebAuthnPromiseService.generateSigningChallenge({\n        id: promise.id,\n        title: promise.title,\n        content: promise.content,\n        deliveryDate: promise.deliveryDate?.toISOString() || \"\",\n        creatorId: promise.creatorId\n      });\n\n      // Create signed promise file\n      const signedPromise = WebAuthnPromiseService.createSignedPromiseFile(\n        promise,\n        signature,\n        publicKey,\n        challenge\n      );\n\n      res.json({ \n        signedPromise,\n        downloadFileName: `promise-${promise.title.replace(/[^a-zA-Z0-9]/g, '_')}-${promise.id}.json`\n      });\n    } catch (error) {\n      console.error(\"Promise signing error:\", error);\n      res.status(400).json({ error: \"Failed to sign promise\" });\n    }\n  });\n\n  // Verify Promise File (standalone verification)\n  app.post(\"/api/verify-promise\", async (req, res) => {\n    try {\n      const { signedPromise } = req.body;\n\n      if (!signedPromise) {\n        return res.status(400).json({ error: \"No signed promise provided\" });\n      }\n\n      const verificationResult = await WebAuthnPromiseService.verifySignedPromise(signedPromise);\n\n      res.json({\n        verification: verificationResult,\n        promise: {\n          id: signedPromise.id,\n          title: signedPromise.title,\n          creator: signedPromise.creator.username,\n          deliveryDate: signedPromise.deliveryDate,\n          createdAt: signedPromise.createdAt,\n        }\n      });\n    } catch (error) {\n      console.error(\"Promise verification error:\", error);\n      res.status(400).json({ error: \"Failed to verify promise\" });\n    }\n  });\n\n  // Get Promises (both created and received)\n  app.get(\"/api/promises\", authenticateJWT, async (req: any, res) => {\n    try {\n      const promises = await db.promise.findMany({\n        where: {\n          OR: [\n            { creatorId: req.user.id },\n            { recipientId: req.user.id },\n            {\n              shares: {\n                some: {\n                  userId: req.user.id,\n                }\n              }\n            }\n          ]\n        },\n        include: {\n          creator: { select: { id: true, username: true } },\n          recipient: { select: { id: true, username: true } },\n          shares: {\n            include: {\n              user: { select: { id: true, username: true } },\n            }\n          },\n          certificates: true,\n        },\n        orderBy: {\n          createdAt: 'desc',\n        }\n      });\n      \n      console.log(`Found ${promises.length} promises for user ${req.user.id}`);\n      res.json({ promises });\n    } catch (error) {\n      console.error(\"Get promises error:\", error);\n      res.status(500).json({ error: \"Failed to get promises\" });\n    }\n  });\n\n  // Validate Promise using WebAuthn fingerprint\n  app.post(\"/api/promises/:id/validate\", authenticateJWT, async (req: any, res) => {\n    try {\n      const promiseId = req.params.id;\n      const { credentialId } = req.body;\n      \n      if (!credentialId) {\n        return res.status(400).json({ error: \"WebAuthn credential ID is required for validation\" });\n      }\n      \n      const promise = await db.promise.findFirst({\n        where: {\n          id: promiseId,\n          OR: [\n            { creatorId: req.user.id },\n            { shares: { some: { userId: req.user.id } } }\n          ]\n        },\n        include: {\n          creator: true,\n          certificates: true,\n        }\n      });\n      \n      if (!promise) {\n        return res.status(404).json({ error: \"Promise not found or access denied\" });\n      }\n      \n      // Validate using stored credential ID\n      const isValid = promise.credentialId === credentialId;\n      \n      let decryptedData = null;\n      if (isValid && req.user.id === promise.creatorId) {\n        try {\n          // Only decrypt for the creator when valid\n          const decrypted = PromiseCrypto.decryptPromise(promise.encryptedData);\n          decryptedData = decrypted.content;\n        } catch (error) {\n          console.error(\"Decryption error:\", error);\n        }\n      }\n      \n      res.json({\n        isValid,\n        promise: {\n          id: promise.id,\n          title: promise.title,\n          creator: promise.creator.username,\n          deliveryDate: promise.deliveryDate,\n          createdAt: promise.createdAt,\n        },\n        decryptedData\n      });\n    } catch (error) {\n      console.error(\"Promise validation error:\", error);\n      res.status(400).json({ error: \"Failed to validate promise\" });\n    }\n  });\n\n  // Download Promise as JSON\n  app.get(\"/api/promises/:id/download\", authenticateJWT, async (req: any, res) => {\n    try {\n      const promiseId = req.params.id;\n      \n      const promise = await db.promise.findFirst({\n        where: {\n          id: promiseId,\n          OR: [\n            { creatorId: req.user.id },\n            { recipientId: req.user.id },\n            { shares: { some: { userId: req.user.id } } }\n          ]\n        },\n        include: {\n          creator: { select: { id: true, username: true } },\n          recipient: { select: { id: true, username: true } },\n          certificates: true,\n        }\n      });\n      \n      if (!promise) {\n        return res.status(404).json({ error: \"Promise not found or access denied\" });\n      }\n      \n      // Create downloadable promise object\n      const downloadablePromise = {\n        id: promise.id,\n        title: promise.title,\n        content: promise.content,\n        creator: {\n          id: promise.creator.id,\n          username: promise.creator.username\n        },\n        recipient: promise.recipient ? {\n          id: promise.recipient.id,\n          username: promise.recipient.username\n        } : null,\n        deliveryDate: promise.deliveryDate,\n        createdAt: promise.createdAt,\n        certificates: promise.certificates,\n        verification: {\n          fingerprint: promise.fingerprint,\n          encryptedData: promise.encryptedData\n        },\n        metadata: promise.metadata\n      };\n      \n      // Set headers for file download\n      const fileName = `promise-${promise.title.replace(/[^a-zA-Z0-9]/g, '_')}-${promise.id}.json`;\n      res.setHeader('Content-Disposition', `attachment; filename=\"${fileName}\"`);\n      res.setHeader('Content-Type', 'application/json');\n      \n      res.json(downloadablePromise);\n    } catch (error) {\n      console.error(\"Promise download error:\", error);\n      res.status(500).json({ error: \"Failed to download promise\" });\n    }\n  });\n\n  return createServer(app);\n}","size_bytes":20903},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// User types\nexport const insertUserSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport const insertCredentialSchema = z.object({\n  id: z.string(),\n  userId: z.string(),\n  publicKey: z.string(),\n  counter: z.number().default(0),\n});\n\n// Promise types\nexport const insertPromiseSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  content: z.string().min(1, \"Promise content is required\"),\n  metadata: z.record(z.any()).optional().default({}),\n  deliveryDate: z.string().optional().transform((str) => str ? new Date(str) : undefined),\n  recipientId: z.string().min(1, \"Recipient is required\"),\n});\n\nexport const promiseShareSchema = z.object({\n  promiseId: z.string(),\n  userIds: z.array(z.string()),\n});\n\n// Inferred types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertCredential = z.infer<typeof insertCredentialSchema>;\nexport type InsertPromise = z.infer<typeof insertPromiseSchema>;\nexport type PromiseShare = z.infer<typeof promiseShareSchema>;\n\n// Database model types (will be provided by Prisma client)\nexport interface User {\n  id: string;\n  username: string;\n  password: string;\n  createdAt: Date;\n}\n\nexport interface Credential {\n  id: string;\n  userId: string;\n  publicKey: string;\n  counter: number;\n  createdAt: Date;\n}\n\nexport interface Promise {\n  id: string;\n  title: string;\n  content: string;\n  metadata: any;\n  encryptedData: string;\n  fingerprint: string;\n  credentialId: string;\n  deliveryDate: Date;\n  createdAt: Date;\n  updatedAt: Date;\n  creatorId: string;\n  creator?: User;\n}\n\nexport interface PromiseCertificate {\n  id: string;\n  promiseId: string;\n  certificate: string;\n  publicKey: string;\n  createdAt: Date;\n}\n","size_bytes":1825},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Header } from \"@/components/layout/header\";\nimport Home from \"@/pages/home\";\nimport Auth from \"@/pages/auth\";\nimport Dashboard from \"@/pages/dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/auth\" component={Auth} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-slate-50\">\n          <Header />\n          <Router />\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1019},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(217.2 91.2% 59.8%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(217.2 91.2% 59.8%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(217.2 91.2% 59.8%);\n  --chart-1: hsl(217.2 91.2% 59.8%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(217.2 91.2% 59.8%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(217.2 91.2% 59.8%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(217.2 91.2% 59.8%);\n  --font-sans: 'Inter', 'Open Sans', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 1px 2px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 1px 2px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 2px 4px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 4px 6px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 8px 10px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(217.2 91.2% 59.8%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(217.2 91.2% 59.8%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(217.2 91.2% 59.8%);\n  --chart-1: hsl(217.2 91.2% 59.8%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(217.2 91.2% 59.8%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(217.2 91.2% 59.8%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(217.2 91.2% 59.8%);\n  --font-sans: 'Inter', 'Open Sans', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 1px 2px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 1px 2px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 2px 4px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 4px 6px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 8px 10px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":4815},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { queryClient } from \"./queryClient\";\n\nexport interface User {\n  id: string;\n  username: string;\n  role: string;\n}\n\nexport const getAuthToken = (): string | null => {\n  return localStorage.getItem(\"authToken\");\n};\n\nexport const setAuthToken = (token: string): void => {\n  localStorage.setItem(\"authToken\", token);\n};\n\nexport const removeAuthToken = (): void => {\n  localStorage.removeItem(\"authToken\");\n  // Invalidate all queries when logging out\n  queryClient.clear();\n};\n\nexport const isAuthenticated = (): boolean => {\n  return getAuthToken() !== null;\n};\n\nexport const logout = (): void => {\n  removeAuthToken();\n  // Redirect to home page\n  window.location.href = \"/\";\n};\n\n// Add Authorization header to all requests\nexport const getAuthHeaders = (): Record<string, string> => {\n  const token = getAuthToken();\n  return token ? { Authorization: `Bearer ${token}` } : {};\n};\n","size_bytes":887},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { getAuthHeaders } from \"./auth\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const headers = {\n    ...(data ? { \"Content-Type\": \"application/json\" } : {}),\n    ...getAuthHeaders(),\n  };\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers: getAuthHeaders(),\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1517},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/webauthn.ts":{"content":"import { startRegistration, startAuthentication } from \"@simplewebauthn/browser\";\nimport { apiRequest } from \"./queryClient\";\n\nexport interface RegistrationOptions {\n  username: string;\n  role: \"admin\" | \"user\";\n}\n\nexport interface LoginOptions {\n  username: string;\n}\n\nexport interface AuthResult {\n  verified: boolean;\n  token: string;\n  user: {\n    id: string;\n    username: string;\n    role: string;\n  };\n}\n\nexport const registerWithWebAuthn = async (options: RegistrationOptions): Promise<AuthResult> => {\n  try {\n    // Get registration options from server\n    const optionsResponse = await apiRequest(\"POST\", \"/api/auth/register/options\", options);\n    const registrationOptions = await optionsResponse.json();\n\n    // Start WebAuthn registration\n    const credential = await startRegistration(registrationOptions);\n\n    // Verify registration with server\n    const verificationResponse = await apiRequest(\"POST\", \"/api/auth/register/verify\", {\n      username: options.username,\n      role: options.role,\n      credential,\n    });\n\n    const result = await verificationResponse.json();\n\n    if (result.verified) {\n      // Store token in localStorage\n      localStorage.setItem(\"authToken\", result.token);\n      return result;\n    } else {\n      throw new Error(\"Registration verification failed\");\n    }\n  } catch (error) {\n    console.error(\"WebAuthn registration error:\", error);\n    throw error;\n  }\n};\n\nexport const loginWithWebAuthn = async (options: LoginOptions): Promise<AuthResult> => {\n  try {\n    // Get authentication options from server\n    const optionsResponse = await apiRequest(\"POST\", \"/api/auth/login/options\", options);\n    const authenticationOptions = await optionsResponse.json();\n\n    // Start WebAuthn authentication\n    const credential = await startAuthentication(authenticationOptions);\n\n    // Verify authentication with server\n    const verificationResponse = await apiRequest(\"POST\", \"/api/auth/login/verify\", {\n      username: options.username,\n      credential,\n    });\n\n    const result = await verificationResponse.json();\n\n    if (result.verified) {\n      // Store token in localStorage\n      localStorage.setItem(\"authToken\", result.token);\n      return result;\n    } else {\n      throw new Error(\"Authentication verification failed\");\n    }\n  } catch (error) {\n    console.error(\"WebAuthn authentication error:\", error);\n    throw error;\n  }\n};\n\n// Register WebAuthn for existing user\nexport const registerWebAuthnForCurrentUser = async (): Promise<{ verified: boolean }> => {\n  try {\n    // Get registration options\n    const optionsResponse = await apiRequest(\"POST\", \"/api/auth/webauthn/register\");\n    const registrationOptions = await optionsResponse.json();\n\n    // Start WebAuthn registration\n    const credential = await startRegistration(registrationOptions);\n\n    // Verify registration\n    const verificationResponse = await apiRequest(\"POST\", \"/api/auth/webauthn/register/verify\", { credential });\n    const result = await verificationResponse.json();\n\n    return {\n      verified: result.verified\n    };\n  } catch (error) {\n    console.error(\"WebAuthn registration error:\", error);\n    throw error;\n  }\n};\n\n// WebAuthn authentication for promise creation\nexport const authenticateForPromise = async (username: string): Promise<{ verified: boolean; fingerprintData: string; credentialId: string }> => {\n  try {\n    // Get authentication options\n    const optionsResponse = await apiRequest(\"POST\", \"/api/auth/webauthn/authenticate/begin\", { username });\n    const authenticationOptions = await optionsResponse.json();\n\n    // Start WebAuthn authentication\n    const credential = await startAuthentication(authenticationOptions);\n\n    // Verify authentication\n    const verificationResponse = await apiRequest(\"POST\", \"/api/auth/webauthn/authenticate/verify\", { credential });\n    const result = await verificationResponse.json();\n\n    if (result.verified) {\n      return {\n        verified: true,\n        fingerprintData: result.fingerprintData,\n        credentialId: result.credentialId\n      };\n    } else {\n      throw new Error(\"Authentication verification failed\");\n    }\n  } catch (error) {\n    console.error(\"WebAuthn promise authentication error:\", error);\n    throw error;\n  }\n};\n\nexport const isWebAuthnSupported = (): boolean => {\n  return (\n    window.PublicKeyCredential !== undefined &&\n    (window.location.protocol === 'https:' || window.location.hostname === 'localhost')\n  );\n};\n","size_bytes":4455},"client/src/pages/auth.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { PasswordRegister } from \"@/components/auth/webauthn-register\";\nimport { PasswordLogin } from \"@/components/auth/webauthn-login\";\nimport { getAuthToken } from \"@/lib/auth\";\n\nexport default function Auth() {\n  const [location, setLocation] = useLocation();\n  const [mode, setMode] = useState<\"login\" | \"register\">(\"login\");\n\n  useEffect(() => {\n    // Check if user is already authenticated\n    if (getAuthToken()) {\n      setLocation(\"/dashboard\");\n      return;\n    }\n\n    // Parse mode from URL params\n    const params = new URLSearchParams(window.location.search);\n    const urlMode = params.get(\"mode\");\n    if (urlMode === \"register\" || urlMode === \"login\") {\n      setMode(urlMode);\n    }\n  }, [setLocation]);\n\n  const handleSuccess = () => {\n    setLocation(\"/dashboard\");\n  };\n\n  const toggleMode = () => {\n    const newMode = mode === \"login\" ? \"register\" : \"login\";\n    setMode(newMode);\n    setLocation(`/auth?mode=${newMode}`);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {mode === \"register\" ? (\n          <PasswordRegister onSuccess={handleSuccess} />\n        ) : (\n          <PasswordLogin onSuccess={handleSuccess} />\n        )}\n        \n        <div className=\"mt-6 text-center\">\n          <Button variant=\"link\" onClick={toggleMode}>\n            {mode === \"login\" \n              ? \"Don't have an account? Register\" \n              : \"Already have an account? Sign in\"\n            }\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1710},"client/src/pages/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { User, ShieldCheck, AlertCircle } from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { PromiseForm } from \"@/components/promises/promise-form\";\nimport { PromiseList } from \"@/components/promises/promise-list\";\nimport { PromiseVerifier } from \"@/components/promises/promise-verifier\";\nimport { getAuthToken } from \"@/lib/auth\";\nimport { getQueryFn } from \"@/lib/queryClient\";\n\nexport default function Dashboard() {\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!getAuthToken()) {\n      setLocation(\"/auth?mode=login\");\n    }\n  }, [setLocation]);\n\n  const { data: currentUser, isLoading: isLoadingUser, error: userError } = useQuery<{ user: { id: string; username: string; role: string } }>({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: getQueryFn({ on401: \"throw\" }),\n    enabled: !!getAuthToken(),\n  });\n\n  const { data: adminStats, isLoading: isLoadingStats } = useQuery<{ totalUsers: number; totalPromises: number; totalShares: number }>({\n    queryKey: [\"/api/admin/stats\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    enabled: currentUser?.user?.role === \"admin\",\n  });\n\n  if (isLoadingUser) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 p-4\">\n        <div className=\"max-w-7xl mx-auto space-y-8\">\n          <Skeleton className=\"h-32 w-full\" />\n          <Skeleton className=\"h-64 w-full\" />\n          <Skeleton className=\"h-96 w-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (userError || !currentUser?.user) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 flex items-center justify-center p-4\">\n        <Alert variant=\"destructive\" className=\"max-w-md\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            Failed to load user data. Please try logging in again.\n          </AlertDescription>\n        </Alert>\n      </div>\n    );\n  }\n\n  const user = currentUser.user;\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 space-y-8\">\n        {/* User Info Card */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"bg-primary/10 w-12 h-12 rounded-full flex items-center justify-center\">\n                  <User className=\"text-primary text-xl\" />\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold text-slate-900\">{user.username}</h3>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant={user.role === \"admin\" ? \"default\" : \"secondary\"}>\n                      {user.role}\n                    </Badge>\n                    <span className=\"text-sm text-slate-500\">Authenticated with WebAuthn</span>\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2 text-green-600\">\n                <ShieldCheck className=\"h-5 w-5\" />\n                <span className=\"text-sm font-medium\">Secure Session</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Admin Panel */}\n        {user.role === \"admin\" && (\n          <Card>\n            <CardContent className=\"p-6\">\n              <h4 className=\"text-lg font-semibold text-slate-900 mb-6 flex items-center\">\n                <User className=\"text-amber-500 mr-2\" />\n                Admin Panel\n              </h4>\n\n              {isLoadingStats ? (\n                <div className=\"grid md:grid-cols-3 gap-6\">\n                  {[...Array(3)].map((_, i) => (\n                    <Skeleton key={i} className=\"h-20 w-full\" />\n                  ))}\n                </div>\n              ) : adminStats ? (\n                <div className=\"grid md:grid-cols-3 gap-6\">\n                  <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-blue-600\">\n                      {adminStats.totalUsers}\n                    </div>\n                    <div className=\"text-sm text-blue-800\">Total Users</div>\n                  </div>\n                  <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-green-600\">\n                      {adminStats.totalPromises}\n                    </div>\n                    <div className=\"text-sm text-green-800\">Total Promises</div>\n                  </div>\n                  <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-purple-600\">\n                      {adminStats.totalShares}\n                    </div>\n                    <div className=\"text-sm text-purple-800\">Promise Shares</div>\n                  </div>\n                </div>\n              ) : (\n                <Alert>\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    Failed to load admin statistics.\n                  </AlertDescription>\n                </Alert>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Main Content Tabs */}\n        <Tabs defaultValue=\"promises\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"promises\">My Promises</TabsTrigger>\n            <TabsTrigger value=\"create\">Create Promise</TabsTrigger>\n            <TabsTrigger value=\"verify\">Verify Promise</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"promises\" className=\"space-y-6\">\n            <PromiseList currentUser={user} />\n          </TabsContent>\n          \n          <TabsContent value=\"create\" className=\"space-y-6\">\n            <PromiseForm />\n          </TabsContent>\n          \n          <TabsContent value=\"verify\" className=\"space-y-6\">\n            <PromiseVerifier />\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  );\n}\n","size_bytes":6425},"client/src/pages/home.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Shield, ShieldCheck, Upload, UserCog, Fingerprint } from \"lucide-react\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      {/* Hero Section */}\n      <div className=\"text-center py-12\">\n        <div className=\"max-w-3xl mx-auto px-4\">\n          <Fingerprint className=\"h-24 w-24 text-primary mx-auto mb-6\" />\n          <h2 className=\"text-4xl font-bold text-slate-900 mb-4\">\n            Cryptographically Secured Promises\n          </h2>\n          <p className=\"text-xl text-slate-600 mb-8\">\n            Create tamper-proof promises encrypted with your biometric data and validated with certificates.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Link href=\"/auth?mode=register\">\n              <Button size=\"lg\" className=\"w-full sm:w-auto\">\n                Get Started\n              </Button>\n            </Link>\n            <Link href=\"/auth?mode=login\">\n              <Button variant=\"outline\" size=\"lg\" className=\"w-full sm:w-auto\">\n                Sign In\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      {/* Features Section */}\n      <div className=\"max-w-6xl mx-auto px-4 py-16\">\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          <Card className=\"text-center\">\n            <CardContent className=\"pt-8 pb-6\">\n              <div className=\"bg-primary/10 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <ShieldCheck className=\"h-8 w-8 text-primary\" />\n              </div>\n              <h3 className=\"font-semibold text-slate-900 mb-2\">Secure Authentication</h3>\n              <p className=\"text-slate-600 text-sm\">\n                Use your fingerprint or Face ID for secure, passwordless login\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"text-center\">\n            <CardContent className=\"pt-8 pb-6\">\n              <div className=\"bg-green-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Upload className=\"h-8 w-8 text-green-600\" />\n              </div>\n              <h3 className=\"font-semibold text-slate-900 mb-2\">Promise Creation</h3>\n              <p className=\"text-slate-600 text-sm\">\n                Create cryptographically secured promises with biometric encryption\n              </p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"text-center\">\n            <CardContent className=\"pt-8 pb-6\">\n              <div className=\"bg-blue-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <UserCog className=\"h-8 w-8 text-blue-600\" />\n              </div>\n              <h3 className=\"font-semibold text-slate-900 mb-2\">Role Management</h3>\n              <p className=\"text-slate-600 text-sm\">\n                Admin and user roles with appropriate access controls\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <footer className=\"bg-white border-t border-slate-200 mt-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"flex flex-col sm:flex-row justify-between items-center\">\n            <div className=\"flex items-center mb-4 sm:mb-0\">\n              <Shield className=\"text-primary mr-2\" />\n              <span className=\"text-slate-600 text-sm\">PromiseShare - Powered by WebAuthn</span>\n            </div>\n            <div className=\"flex flex-col sm:flex-row items-center space-y-2 sm:space-y-0 sm:space-x-4 text-sm text-slate-500\">\n              <span>Cryptographic Promise Security</span>\n              <span className=\"hidden sm:inline\">•</span>\n              <span>Biometric Encryption</span>\n              <span className=\"hidden sm:inline\">•</span>\n              <span>Certificate Validation</span>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":4171},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/auth/webauthn-login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Fingerprint, LogIn, AlertCircle, ShieldCheck } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\ninterface PasswordLoginProps {\n  onSuccess: () => void;\n}\n\nexport function PasswordLogin({ onSuccess }: PasswordLoginProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: LoginFormData) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      const result = await response.json();\n      \n      if (result.token) {\n        localStorage.setItem(\"authToken\", result.token);\n        toast({\n          title: \"Login successful!\",\n          description: \"You have been logged in securely.\",\n        });\n        onSuccess();\n      } else {\n        setError(\"Login failed. Please check your credentials.\");\n      }\n    } catch (err: any) {\n      setError(err.message || \"Login failed. Please try again.\");\n      console.error(\"Login error:\", err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader className=\"text-center\">\n        <LogIn className=\"h-12 w-12 text-primary mx-auto mb-3\" />\n        <CardTitle className=\"text-2xl\">Welcome Back</CardTitle>\n        <CardDescription>Sign in with your username and password</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"username\">Username</Label>\n            <Input\n              id=\"username\"\n              {...form.register(\"username\")}\n              placeholder=\"Enter your username\"\n              disabled={isLoading}\n            />\n            {form.formState.errors.username && (\n              <p className=\"text-sm text-red-600\">{form.formState.errors.username.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Password</Label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              {...form.register(\"password\")}\n              placeholder=\"Enter your password\"\n              disabled={isLoading}\n            />\n            {form.formState.errors.password && (\n              <p className=\"text-sm text-red-600\">{form.formState.errors.password.message}</p>\n            )}\n          </div>\n\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          <Button \n            type=\"submit\" \n            className=\"w-full\" \n            disabled={isLoading}\n          >\n            <LogIn className=\"h-4 w-4 mr-2\" />\n            {isLoading ? \"Signing In...\" : \"Sign In\"}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3904},"client/src/components/auth/webauthn-register.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Fingerprint, UserPlus, AlertCircle, Info } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst registerSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\ntype RegisterFormData = z.infer<typeof registerSchema>;\n\ninterface PasswordRegisterProps {\n  onSuccess: () => void;\n}\n\nexport function PasswordRegister({ onSuccess }: PasswordRegisterProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const form = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: RegisterFormData) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", data);\n      const result = await response.json();\n      \n      if (result.token) {\n        localStorage.setItem(\"authToken\", result.token);\n        toast({\n          title: \"Registration successful!\",\n          description: \"You have been registered and logged in.\",\n        });\n        onSuccess();\n      } else {\n        setError(\"Registration failed. Please try again.\");\n      }\n    } catch (err: any) {\n      console.error(\"Registration error:\", err);\n      setError(err.message || \"Registration failed. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader className=\"text-center\">\n        <UserPlus className=\"h-12 w-12 text-primary mx-auto mb-3\" />\n        <CardTitle className=\"text-2xl\">Create Account</CardTitle>\n        <CardDescription>Register with your username and password</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"username\">Username</Label>\n            <Input\n              id=\"username\"\n              {...form.register(\"username\")}\n              placeholder=\"Enter your username\"\n              disabled={isLoading}\n            />\n            {form.formState.errors.username && (\n              <p className=\"text-sm text-red-600\">{form.formState.errors.username.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Password</Label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              {...form.register(\"password\")}\n              placeholder=\"Enter your password\"\n              disabled={isLoading}\n            />\n            {form.formState.errors.password && (\n              <p className=\"text-sm text-red-600\">{form.formState.errors.password.message}</p>\n            )}\n          </div>\n\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          <Button \n            type=\"submit\" \n            className=\"w-full\" \n            disabled={isLoading}\n          >\n            <UserPlus className=\"h-4 w-4 mr-2\" />\n            {isLoading ? \"Registering...\" : \"Register\"}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4084},"client/src/components/files/file-list.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { \n  FolderOpen, \n  Download, \n  Trash2, \n  FileText, \n  Image, \n  FileSpreadsheet,\n  File as FileIcon,\n  AlertCircle\n} from \"lucide-react\";\nimport { getQueryFn } from \"@/lib/queryClient\";\nimport { getAuthHeaders } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface FileWithUploader {\n  id: string;\n  filename: string;\n  originalName: string;\n  mimetype: string;\n  size: number;\n  uploadedBy: string;\n  uploadedAt: string;\n  uploaderUsername: string;\n}\n\ninterface FileListProps {\n  currentUser?: {\n    id: string;\n    username: string;\n    role: string;\n  };\n}\n\nexport function FileList({ currentUser }: FileListProps) {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: filesData, isLoading, error } = useQuery<{ files: FileWithUploader[] }>({\n    queryKey: [\"/api/files\"],\n    queryFn: getQueryFn({ on401: \"throw\" }),\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (fileId: string) => {\n      const response = await fetch(`/api/files/${fileId}`, {\n        method: \"DELETE\",\n        headers: getAuthHeaders(),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Delete failed\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/files\"] });\n      toast({\n        title: \"File deleted\",\n        description: \"The file has been removed successfully.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Delete failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDownload = async (fileId: string, filename: string) => {\n    try {\n      const response = await fetch(`/api/files/${fileId}/download`, {\n        headers: getAuthHeaders(),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Download failed\");\n      }\n\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n\n      toast({\n        title: \"Download started\",\n        description: \"Your file is being downloaded.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Download failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getFileIcon = (mimetype: string) => {\n    if (mimetype.startsWith(\"image/\")) return <Image className=\"text-purple-600\" />;\n    if (mimetype.includes(\"pdf\")) return <FileText className=\"text-red-600\" />;\n    if (mimetype.includes(\"spreadsheet\") || mimetype.includes(\"excel\")) \n      return <FileSpreadsheet className=\"text-green-600\" />;\n    return <FileIcon className=\"text-blue-600\" />;\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return \"0 Bytes\";\n    const k = 1024;\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return \"Just now\";\n    if (diffInHours < 24) return `${diffInHours} hours ago`;\n    if (diffInHours < 48) return \"1 day ago\";\n    return `${Math.floor(diffInHours / 24)} days ago`;\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <FolderOpen className=\"text-primary mr-2\" />\n            Your Files\n            <Skeleton className=\"ml-2 h-6 w-16\" />\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {[...Array(3)].map((_, i) => (\n            <div key={i} className=\"flex items-center justify-between p-4 border rounded-lg\">\n              <div className=\"flex items-center space-x-3\">\n                <Skeleton className=\"h-10 w-10 rounded-lg\" />\n                <div className=\"space-y-2\">\n                  <Skeleton className=\"h-4 w-32\" />\n                  <Skeleton className=\"h-3 w-24\" />\n                </div>\n              </div>\n              <div className=\"flex space-x-2\">\n                <Skeleton className=\"h-8 w-8\" />\n                <Skeleton className=\"h-8 w-8\" />\n              </div>\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <CardContent className=\"pt-6\">\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              Failed to load files. Please try refreshing the page.\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const files: FileWithUploader[] = filesData?.files || [];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <FolderOpen className=\"text-primary mr-2\" />\n          Your Files\n          <Badge variant=\"secondary\" className=\"ml-2\">\n            {files.length} files\n          </Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {files.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <FolderOpen className=\"h-16 w-16 text-slate-300 mx-auto mb-4\" />\n            <p className=\"text-slate-500 mb-4\">No files uploaded yet</p>\n            <p className=\"text-sm text-slate-400\">Upload your first file to get started</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {files.map((file) => (\n              <div\n                key={file.id}\n                className=\"flex items-center justify-between p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors\"\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"bg-slate-100 w-10 h-10 rounded-lg flex items-center justify-center\">\n                    {getFileIcon(file.mimetype)}\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-slate-900\">{file.originalName}</p>\n                    <div className=\"flex items-center space-x-4 text-sm text-slate-500\">\n                      <span>{formatFileSize(file.size)}</span>\n                      <span>{formatDate(file.uploadedAt)}</span>\n                      <span className={file.uploaderUsername === currentUser?.username ? \"text-green-600\" : \"text-blue-600\"}>\n                        by {file.uploaderUsername}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleDownload(file.id, file.originalName)}\n                    className=\"text-blue-600 hover:text-blue-700 hover:bg-blue-50\"\n                  >\n                    <Download className=\"h-4 w-4\" />\n                  </Button>\n                  {currentUser?.role === \"admin\" && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => deleteMutation.mutate(file.id)}\n                      disabled={deleteMutation.isPending}\n                      className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8398},"client/src/components/layout/header.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Shield, LogOut } from \"lucide-react\";\nimport { getAuthToken, logout } from \"@/lib/auth\";\nimport { getQueryFn } from \"@/lib/queryClient\";\n\nexport function Header() {\n  const [location] = useLocation();\n  const isAuthenticated = !!getAuthToken();\n\n  const { data: currentUser } = useQuery<{ user: { id: string; username: string; role: string } }>({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n    enabled: isAuthenticated,\n  });\n\n  const handleLogout = () => {\n    logout();\n  };\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-slate-200\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center\">\n            <Link href=\"/\">\n              <div className=\"flex items-center cursor-pointer\">\n                <Shield className=\"text-primary text-2xl mr-3\" />\n                <h1 className=\"text-xl font-bold text-slate-900\">PromiseShare</h1>\n                <span className=\"ml-2 text-sm text-slate-500\">Secure Promise Platform</span>\n              </div>\n            </Link>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            {!isAuthenticated ? (\n              <div className=\"flex space-x-3\">\n                <Link href=\"/auth?mode=login\">\n                  <Button variant=\"ghost\" size=\"sm\">\n                    Sign In\n                  </Button>\n                </Link>\n                <Link href=\"/auth?mode=register\">\n                  <Button size=\"sm\">\n                    Get Started\n                  </Button>\n                </Link>\n              </div>\n            ) : (\n              currentUser?.user && (\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant={currentUser.user.role === \"admin\" ? \"default\" : \"secondary\"}>\n                      {currentUser.user.role}\n                    </Badge>\n                    <span className=\"text-sm font-medium text-slate-700\">\n                      {currentUser.user.username}\n                    </span>\n                  </div>\n                  <Button variant=\"ghost\" size=\"sm\" onClick={handleLogout}>\n                    <LogOut className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              )\n            )}\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2680},"client/src/components/promises/certificate-view.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  Shield, \n  CheckCircle, \n  XCircle, \n  Calendar, \n  User, \n  Fingerprint,\n  Award,\n  Lock\n} from \"lucide-react\";\n\ninterface CertificateViewProps {\n  validationResult: {\n    isValid: boolean;\n    promise: {\n      id: string;\n      title: string;\n      creator: string;\n      deliveryDate: string;\n      createdAt: string;\n    };\n    decryptedData?: {\n      content: string;\n      timestamp: number;\n    };\n  };\n  onClose: () => void;\n}\n\nexport function CertificateView({ validationResult, onClose }: CertificateViewProps) {\n  const { isValid, promise, decryptedData } = validationResult;\n  \n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Certificate Header */}\n      <div className=\"text-center pb-4 border-b\">\n        <div className=\"flex justify-center mb-4\">\n          {isValid ? (\n            <div className=\"h-16 w-16 bg-green-100 rounded-full flex items-center justify-center\">\n              <Award className=\"h-8 w-8 text-green-600\" />\n            </div>\n          ) : (\n            <div className=\"h-16 w-16 bg-red-100 rounded-full flex items-center justify-center\">\n              <XCircle className=\"h-8 w-8 text-red-600\" />\n            </div>\n          )}\n        </div>\n        <h2 className=\"text-2xl font-bold text-slate-900\">\n          Promise Certificate\n        </h2>\n        <p className=\"text-slate-600 mt-1\">\n          Cryptographically Secured Promise Validation\n        </p>\n      </div>\n\n      {/* Validation Status */}\n      <Alert variant={isValid ? \"default\" : \"destructive\"}>\n        {isValid ? (\n          <CheckCircle className=\"h-4 w-4\" />\n        ) : (\n          <XCircle className=\"h-4 w-4\" />\n        )}\n        <AlertDescription className=\"font-medium\">\n          {isValid \n            ? \"✓ This promise certificate is cryptographically valid and verified.\"\n            : \"✗ This promise certificate could not be verified or has been tampered with.\"\n          }\n        </AlertDescription>\n      </Alert>\n\n      {/* Promise Details */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Shield className=\"h-5 w-5 mr-2 text-primary\" />\n            Promise Details\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label className=\"text-sm font-medium text-slate-500\">Promise Title</Label>\n              <p className=\"text-slate-900 font-medium\">{promise.title}</p>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-slate-500\">Promise ID</Label>\n              <p className=\"text-slate-600 font-mono text-sm\">{promise.id}</p>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-slate-500 flex items-center\">\n                <User className=\"h-4 w-4 mr-1\" />\n                Created By\n              </Label>\n              <p className=\"text-slate-900\">{promise.creator}</p>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-slate-500 flex items-center\">\n                <Calendar className=\"h-4 w-4 mr-1\" />\n                Delivery Date\n              </Label>\n              <p className=\"text-slate-900\">{formatDate(promise.deliveryDate)}</p>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-slate-500\">Created On</Label>\n              <p className=\"text-slate-600\">{formatDate(promise.createdAt)}</p>\n            </div>\n            <div>\n              <Label className=\"text-sm font-medium text-slate-500\">Validation Status</Label>\n              <Badge variant={isValid ? \"default\" : \"destructive\"}>\n                {isValid ? \"VERIFIED\" : \"INVALID\"}\n              </Badge>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Decrypted Content (only for creator) */}\n      {decryptedData && (\n        <Card className=\"border-green-200 bg-green-50\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center text-green-800\">\n              <Lock className=\"h-5 w-5 mr-2\" />\n              Decrypted Promise Content\n            </CardTitle>\n            <CardDescription className=\"text-green-700\">\n              This content is only visible to you as the promise creator\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"p-4 bg-white rounded-lg border border-green-200\">\n              <p className=\"text-slate-900 whitespace-pre-wrap\">{decryptedData.content}</p>\n            </div>\n            <div className=\"flex items-center text-sm text-green-700\">\n              <Fingerprint className=\"h-4 w-4 mr-1\" />\n              Verified with biometric signature at: {new Date(decryptedData.timestamp).toLocaleString()}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Certificate Footer */}\n      <div className=\"bg-slate-50 p-4 rounded-lg text-center\">\n        <p className=\"text-sm text-slate-600 mb-2\">\n          This certificate was generated using WebAuthn biometric authentication\n        </p>\n        <p className=\"text-xs text-slate-500\">\n          PromiseShare • Cryptographically Secured Promise Platform\n        </p>\n      </div>\n\n      <div className=\"flex justify-center pt-4\">\n        <Button onClick={onClose} variant=\"outline\">\n          Close Certificate\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nfunction Label({ children, className }: { children: React.ReactNode; className?: string }) {\n  return <div className={className}>{children}</div>;\n}","size_bytes":6165},"client/src/components/promises/promise-form.tsx":{"content":"import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Shield, Calendar, AlertCircle, User, Fingerprint } from \"lucide-react\";\nimport { insertPromiseSchema } from \"@shared/schema\";\nimport { getAuthHeaders } from \"@/lib/auth\";\nimport { getQueryFn } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { authenticateForPromise, isWebAuthnSupported, registerWebAuthnForCurrentUser } from \"@/lib/webauthn\";\nimport type { InsertPromise } from \"@shared/schema\";\n\ninterface PromiseFormProps {\n  onSuccess?: () => void;\n}\n\nexport function PromiseForm({ onSuccess }: PromiseFormProps) {\n  const [error, setError] = useState<string | null>(null);\n  const [isAuthenticating, setIsAuthenticating] = useState(false);\n  const [isRegistering, setIsRegistering] = useState(false);\n  const [webAuthnRegistered, setWebAuthnRegistered] = useState<boolean | null>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: usersData } = useQuery<{ users: { id: string; username: string; role: string }[] }>({\n    queryKey: [\"/api/users\"],\n    queryFn: getQueryFn({ on401: \"throw\" }),\n  });\n\n  const { data: currentUser } = useQuery<{ user: { id: string; username: string } }>({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: getQueryFn({ on401: \"throw\" }),\n  });\n\n  // Check if WebAuthn is already registered\n  const { data: credentialsData } = useQuery<{ credentials: any[] }>({\n    queryKey: [\"/api/auth/credentials\"],\n    queryFn: getQueryFn({ on401: \"throw\" }),\n    enabled: isWebAuthnSupported(),\n  });\n\n  // Update webAuthnRegistered state when credentials data changes\n  React.useEffect(() => {\n    if (credentialsData) {\n      setWebAuthnRegistered(credentialsData.credentials.length > 0);\n    }\n  }, [credentialsData]);\n\n  const registerWebAuthn = async () => {\n    try {\n      setIsRegistering(true);\n      const result = await registerWebAuthnForCurrentUser();\n      if (result.verified) {\n        setWebAuthnRegistered(true);\n        queryClient.invalidateQueries({ queryKey: [\"/api/auth/credentials\"] });\n        toast({\n          title: \"Fingerprint registered!\",\n          description: \"You can now create promises with your fingerprint.\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Registration failed\",\n        description: error instanceof Error ? error.message : \"Failed to register fingerprint\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsRegistering(false);\n    }\n  };\n\n  const form = useForm({\n    resolver: zodResolver(insertPromiseSchema),\n    defaultValues: {\n      title: \"\",\n      content: \"\",\n      metadata: {},\n      deliveryDate: \"\",\n      recipientId: \"\",\n    },\n  });\n\n  const createPromiseMutation = useMutation({\n    mutationFn: async (data: InsertPromise) => {\n      if (!isWebAuthnSupported()) {\n        throw new Error(\"WebAuthn is not supported in this environment. Please use HTTPS or localhost.\");\n      }\n\n      if (!currentUser?.user?.username) {\n        throw new Error(\"User information not available\");\n      }\n\n      setIsAuthenticating(true);\n      \n      try {\n        // Authenticate with WebAuthn to get fingerprint data\n        const authResult = await authenticateForPromise(currentUser.user.username);\n        \n        if (!authResult.verified) {\n          throw new Error(\"WebAuthn authentication failed\");\n        }\n\n        // Create promise with WebAuthn fingerprint data\n        const response = await fetch(\"/api/promises\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            ...getAuthHeaders(),\n          },\n          body: JSON.stringify({\n            promiseData: data,\n            fingerprintData: authResult.fingerprintData,\n            credentialId: authResult.credentialId\n          }),\n        });\n\n        if (!response.ok) {\n          const error = await response.json();\n          throw new Error(error.error || \"Failed to create promise\");\n        }\n\n        return response.json();\n      } finally {\n        setIsAuthenticating(false);\n      }\n    },\n    onSuccess: (result) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/promises\"] });\n      toast({\n        title: \"Promise created successfully!\",\n        description: \"Your promise has been encrypted and secured. You can optionally sign it with WebAuthn for enhanced security.\",\n      });\n      form.reset();\n      onSuccess?.();\n      setError(null);\n    },\n    onError: (error: Error) => {\n      setError(error.message);\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    setError(null);\n    createPromiseMutation.mutate(data);\n  };\n\n  // Set minimum date to today\n  const today = new Date().toISOString().split('T')[0];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <Shield className=\"text-primary mr-2\" />\n          Create Secured Promise\n        </CardTitle>\n        <CardDescription>\n          Your promise will be secured with your biometric fingerprint and cannot be modified once created\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\">Promise Title</Label>\n            <Input\n              id=\"title\"\n              {...form.register(\"title\")}\n              placeholder=\"e.g., Project Delivery Promise\"\n              disabled={createPromiseMutation.isPending}\n            />\n            {form.formState.errors.title && (\n              <p className=\"text-sm text-red-600\">{form.formState.errors.title.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"content\">Promise Content</Label>\n            <Textarea\n              id=\"content\"\n              {...form.register(\"content\")}\n              placeholder=\"I promise to deliver the project on time with all specified features...\"\n              rows={4}\n              disabled={createPromiseMutation.isPending}\n            />\n            {form.formState.errors.content && (\n              <p className=\"text-sm text-red-600\">{form.formState.errors.content.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"deliveryDate\" className=\"flex items-center\">\n              <Calendar className=\"h-4 w-4 mr-1\" />\n              Delivery Date\n            </Label>\n            <Input\n              id=\"deliveryDate\"\n              type=\"date\"\n              min={today}\n              {...form.register(\"deliveryDate\")}\n              disabled={createPromiseMutation.isPending}\n            />\n            {form.formState.errors.deliveryDate && (\n              <p className=\"text-sm text-red-600\">{form.formState.errors.deliveryDate.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"recipient\" className=\"flex items-center\">\n              <User className=\"h-4 w-4 mr-1\" />\n              Recipient\n            </Label>\n            <Select\n              onValueChange={(value) => form.setValue(\"recipientId\", value)}\n              disabled={createPromiseMutation.isPending}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select recipient\" />\n              </SelectTrigger>\n              <SelectContent>\n                {usersData?.users?.map((user) => (\n                  <SelectItem key={user.id} value={user.id}>\n                    {user.username}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            <p className=\"text-xs text-slate-500\">\n              Recipient is required for promise creation\n            </p>\n          </div>\n\n          {!isWebAuthnSupported() ? (\n            <Alert variant=\"destructive\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                WebAuthn is not supported in this environment. Please use HTTPS or localhost with a compatible browser.\n              </AlertDescription>\n            </Alert>\n          ) : webAuthnRegistered === false ? (\n            <Alert>\n              <Fingerprint className=\"h-4 w-4\" />\n              <AlertDescription>\n                You need to register your fingerprint first to create promises.\n                <Button \n                  variant=\"link\" \n                  className=\"ml-2 p-0 h-auto\"\n                  onClick={registerWebAuthn}\n                  disabled={isRegistering}\n                >\n                  {isRegistering ? \"Registering...\" : \"Register Fingerprint\"}\n                </Button>\n              </AlertDescription>\n            </Alert>\n          ) : (\n            <Alert>\n              <Fingerprint className=\"h-4 w-4\" />\n              <AlertDescription>\n                This promise will be secured with your biometric fingerprint and cannot be modified after creation.\n              </AlertDescription>\n            </Alert>\n          )}\n\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          <Button\n            type=\"submit\"\n            className=\"w-full\"\n            disabled={createPromiseMutation.isPending || isAuthenticating || !isWebAuthnSupported() || webAuthnRegistered === false}\n          >\n            {isAuthenticating ? (\n              <>\n                <Fingerprint className=\"h-4 w-4 mr-2\" />\n                Please use your fingerprint...\n              </>\n            ) : createPromiseMutation.isPending ? (\n              <>\n                <Shield className=\"h-4 w-4 mr-2\" />\n                Creating Secured Promise...\n              </>\n            ) : (\n              <>\n                <Fingerprint className=\"h-4 w-4 mr-2\" />\n                Create Promise with Fingerprint\n              </>\n            )}\n          </Button>\n        </form>\n      </CardContent>\n      \n    </Card>\n  );\n}","size_bytes":10694},"client/src/components/promises/promise-list.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { \n  Shield, \n  Share2, \n  CheckCircle, \n  Clock,\n  User,\n  Calendar,\n  AlertCircle,\n  Eye,\n  Download,\n  Fingerprint\n} from \"lucide-react\";\nimport { getQueryFn } from \"@/lib/queryClient\";\nimport { getAuthHeaders } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { authenticateForPromise } from \"@/lib/webauthn\";\nimport { SharePromiseForm } from \"@/components/promises/share-promise-form\";\nimport { CertificateView } from \"@/components/promises/certificate-view\";\n\ninterface PromiseWithDetails {\n  id: string;\n  title: string;\n  content: string;\n  deliveryDate: string;\n  createdAt: string;\n  creator: {\n    id: string;\n    username: string;\n  };\n  shares: {\n    user: {\n      id: string;\n      username: string;\n    };\n  }[];\n  certificates: {\n    id: string;\n    publicKey: string;\n  }[];\n}\n\ninterface PromiseListProps {\n  currentUser?: {\n    id: string;\n    username: string;\n    role: string;\n  };\n}\n\nexport function PromiseList({ currentUser }: PromiseListProps) {\n  const [selectedPromise, setSelectedPromise] = useState<string | null>(null);\n  const [validationResult, setValidationResult] = useState<any>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const authenticateForValidation = async () => {\n    if (!currentUser?.username) {\n      throw new Error(\"Current user not available\");\n    }\n    \n    const authResult = await authenticateForPromise(currentUser.username);\n    if (!authResult.verified) {\n      throw new Error(\"WebAuthn authentication failed\");\n    }\n    return authResult;\n  };\n\n  const downloadMutation = useMutation({\n    mutationFn: async (promiseId: string) => {\n      const response = await fetch(`/api/promises/${promiseId}/download`, {\n        headers: getAuthHeaders(),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Download failed\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (result) => {\n      // Create and trigger download\n      const blob = new Blob([JSON.stringify(result, null, 2)], { type: 'application/json' });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `promise-${result.title.replace(/[^a-zA-Z0-9]/g, '_')}-${result.id}.json`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n      \n      toast({\n        title: \"Promise downloaded!\",\n        description: \"The promise has been saved to your computer as a JSON file.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Download failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const { data: promisesData, isLoading, error } = useQuery<{ promises: PromiseWithDetails[] }>({\n    queryKey: [\"/api/promises\"],\n    queryFn: getQueryFn({ on401: \"throw\" }),\n  });\n\n  const validateMutation = useMutation({\n    mutationFn: async (promiseId: string) => {\n      // First authenticate with WebAuthn to get credential data\n      const authResult = await authenticateForValidation();\n      \n      const response = await fetch(`/api/promises/${promiseId}/validate`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          ...getAuthHeaders(),\n        },\n        body: JSON.stringify({ credentialId: authResult.credentialId }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Validation failed\");\n      }\n\n      return response.json();\n    },\n    onSuccess: (result, promiseId) => {\n      setSelectedPromise(promiseId);\n      setValidationResult(result);\n      toast({\n        title: result.isValid ? \"Certificate validated!\" : \"Validation failed\",\n        description: result.isValid \n          ? \"Opening certificate viewer...\"\n          : \"The promise certificate could not be verified.\",\n        variant: result.isValid ? \"default\" : \"destructive\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Validation error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  const getPromiseStatus = (deliveryDate: string) => {\n    const now = new Date();\n    const delivery = new Date(deliveryDate);\n    \n    if (delivery < now) {\n      return { status: \"overdue\", color: \"destructive\" as const, icon: AlertCircle };\n    } else if ((delivery.getTime() - now.getTime()) < 7 * 24 * 60 * 60 * 1000) {\n      return { status: \"due_soon\", color: \"secondary\" as const, icon: Clock };\n    } else {\n      return { status: \"active\", color: \"default\" as const, icon: CheckCircle };\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Shield className=\"text-primary mr-2\" />\n            Your Promises\n            <Skeleton className=\"ml-2 h-6 w-16\" />\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {[...Array(3)].map((_, i) => (\n            <div key={i} className=\"p-4 border rounded-lg space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <Skeleton className=\"h-5 w-48\" />\n                <Skeleton className=\"h-5 w-20\" />\n              </div>\n              <Skeleton className=\"h-4 w-full\" />\n              <div className=\"flex space-x-2\">\n                <Skeleton className=\"h-8 w-20\" />\n                <Skeleton className=\"h-8 w-20\" />\n              </div>\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <CardContent className=\"pt-6\">\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              Failed to load promises. Please try refreshing the page.\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const promises = promisesData?.promises || [];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <Shield className=\"text-primary mr-2\" />\n          Secured Promises\n          <Badge variant=\"secondary\" className=\"ml-2\">\n            {promises.length} promises\n          </Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {promises.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <Shield className=\"h-16 w-16 text-slate-300 mx-auto mb-4\" />\n            <p className=\"text-slate-500 mb-4\">No promises created yet</p>\n            <p className=\"text-sm text-slate-400\">Create your first secured promise to get started</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {promises.map((promise) => {\n              const status = getPromiseStatus(promise.deliveryDate);\n              const StatusIcon = status.icon;\n              const isCreator = currentUser?.id === promise.creator.id;\n              \n              return (\n                <div\n                  key={promise.id}\n                  className=\"p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors space-y-3\"\n                >\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <h3 className=\"font-semibold text-slate-900\">{promise.title}</h3>\n                        <Badge variant={status.color} className=\"flex items-center\">\n                          <StatusIcon className=\"h-3 w-3 mr-1\" />\n                          {status.status.replace('_', ' ')}\n                        </Badge>\n                      </div>\n                      \n                      <p className=\"text-slate-600 text-sm mb-3 line-clamp-2\">\n                        {promise.content}\n                      </p>\n                      \n                      <div className=\"flex items-center space-x-4 text-sm text-slate-500\">\n                        <span className=\"flex items-center\">\n                          <User className=\"h-4 w-4 mr-1\" />\n                          by {promise.creator.username} {isCreator && \"(you)\"}\n                        </span>\n                        <span className=\"flex items-center\">\n                          <Calendar className=\"h-4 w-4 mr-1\" />\n                          Due: {formatDate(promise.deliveryDate)}\n                        </span>\n                        <span>\n                          Shared with {promise.shares.length} users\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => validateMutation.mutate(promise.id)}\n                        disabled={validateMutation.isPending}\n                      >\n                        <Fingerprint className=\"h-4 w-4 mr-1\" />\n                        {validateMutation.isPending ? \"Authenticating...\" : \"Validate with Fingerprint\"}\n                      </Button>\n\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => downloadMutation.mutate(promise.id)}\n                        disabled={downloadMutation.isPending}\n                      >\n                        <Download className=\"h-4 w-4 mr-1\" />\n                        Download\n                      </Button>\n\n                      {isCreator && (\n                        <Dialog>\n                          <DialogTrigger asChild>\n                            <Button variant=\"outline\" size=\"sm\">\n                              <Share2 className=\"h-4 w-4 mr-1\" />\n                              Share\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent>\n                            <DialogHeader>\n                              <DialogTitle>Share Promise</DialogTitle>\n                            </DialogHeader>\n                            <SharePromiseForm \n                              promiseId={promise.id} \n                              onSuccess={() => {\n                                queryClient.invalidateQueries({ queryKey: [\"/api/promises\"] });\n                              }}\n                            />\n                          </DialogContent>\n                        </Dialog>\n                      )}\n\n                      {validationResult && selectedPromise === promise.id && (\n                        <Dialog open={true} onOpenChange={() => { setValidationResult(null); setSelectedPromise(null); }}>\n                          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n                            <CertificateView\n                              validationResult={validationResult}\n                              onClose={() => { setValidationResult(null); setSelectedPromise(null); }}\n                            />\n                          </DialogContent>\n                        </Dialog>\n                      )}\n                    </div>\n                    \n                    <div className=\"text-xs text-slate-400\">\n                      Created: {formatDate(promise.createdAt)}\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":12530},"client/src/components/promises/share-promise-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { promiseShareSchema } from \"@shared/schema\";\nimport { getAuthHeaders } from \"@/lib/auth\";\nimport { getQueryFn } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Share2, AlertCircle, User } from \"lucide-react\";\nimport type { PromiseShare } from \"@shared/schema\";\n\ninterface SharePromiseFormProps {\n  promiseId: string;\n  onSuccess?: () => void;\n}\n\nexport function SharePromiseForm({ promiseId, onSuccess }: SharePromiseFormProps) {\n  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);\n  const [error, setError] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const { data: usersData, isLoading } = useQuery<{ users: { id: string; username: string; role: string }[] }>({\n    queryKey: [\"/api/users\"],\n    queryFn: getQueryFn({ on401: \"throw\" }),\n  });\n\n  const form = useForm<PromiseShare>({\n    resolver: zodResolver(promiseShareSchema),\n    defaultValues: {\n      promiseId,\n      userIds: [],\n    },\n  });\n\n  const shareMutation = useMutation({\n    mutationFn: async (data: PromiseShare) => {\n      const response = await fetch(`/api/promises/${promiseId}/share`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          ...getAuthHeaders(),\n        },\n        body: JSON.stringify({ userIds: data.userIds }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Failed to share promise\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Promise shared successfully!\",\n        description: \"Selected users can now validate your promise certificate.\",\n      });\n      setSelectedUsers([]);\n      onSuccess?.();\n      setError(null);\n    },\n    onError: (error: Error) => {\n      setError(error.message);\n    },\n  });\n\n  const handleUserSelect = (userId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedUsers(prev => [...prev, userId]);\n    } else {\n      setSelectedUsers(prev => prev.filter(id => id !== userId));\n    }\n  };\n\n  const onSubmit = () => {\n    if (selectedUsers.length === 0) {\n      setError(\"Please select at least one user to share with\");\n      return;\n    }\n\n    setError(null);\n    shareMutation.mutate({\n      promiseId,\n      userIds: selectedUsers,\n    });\n  };\n\n  const users = usersData?.users || [];\n\n  return (\n    <div className=\"space-y-4\">\n      <div>\n        <Label className=\"text-base font-semibold\">Select users to share with:</Label>\n        <p className=\"text-sm text-slate-600 mt-1\">\n          These users will receive validation certificates for your promise.\n        </p>\n      </div>\n\n      {isLoading ? (\n        <div className=\"space-y-2\">\n          <div className=\"h-4 bg-slate-200 rounded animate-pulse\"></div>\n          <div className=\"h-4 bg-slate-200 rounded animate-pulse\"></div>\n          <div className=\"h-4 bg-slate-200 rounded animate-pulse\"></div>\n        </div>\n      ) : users.length === 0 ? (\n        <Alert>\n          <User className=\"h-4 w-4\" />\n          <AlertDescription>\n            No other users available to share with.\n          </AlertDescription>\n        </Alert>\n      ) : (\n        <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n          {users.map((user) => (\n            <div key={user.id} className=\"flex items-center space-x-3 p-3 border rounded-lg hover:bg-slate-50\">\n              <Checkbox\n                id={user.id}\n                checked={selectedUsers.includes(user.id)}\n                onCheckedChange={(checked) => handleUserSelect(user.id, !!checked)}\n              />\n              <div className=\"flex-1\">\n                <Label htmlFor={user.id} className=\"cursor-pointer\">\n                  <div className=\"flex items-center space-x-2\">\n                    <User className=\"h-4 w-4 text-slate-400\" />\n                    <span className=\"font-medium\">{user.username}</span>\n                    <span className=\"text-xs px-2 py-1 bg-slate-100 rounded\">\n                      {user.role}\n                    </span>\n                  </div>\n                </Label>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {selectedUsers.length > 0 && (\n        <Alert>\n          <Share2 className=\"h-4 w-4\" />\n          <AlertDescription>\n            {selectedUsers.length} user{selectedUsers.length !== 1 ? 's' : ''} selected for sharing.\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {error && (\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      <div className=\"flex space-x-2\">\n        <Button\n          onClick={onSubmit}\n          disabled={shareMutation.isPending || selectedUsers.length === 0}\n          className=\"flex-1\"\n        >\n          <Share2 className=\"h-4 w-4 mr-2\" />\n          {shareMutation.isPending ? \"Sharing...\" : `Share with ${selectedUsers.length} user${selectedUsers.length !== 1 ? 's' : ''}`}\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":5499},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/file-upload.tsx":{"content":"import { useCallback, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Upload, File, X, AlertCircle } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { getAuthHeaders } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface FileUploadProps {\n  onUploadSuccess?: () => void;\n}\n\nexport function FileUpload({ onUploadSuccess }: FileUploadProps) {\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [error, setError] = useState<string | null>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const uploadMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n\n      const response = await fetch(\"/api/files/upload\", {\n        method: \"POST\",\n        headers: getAuthHeaders(),\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Upload failed\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/files\"] });\n      toast({\n        title: \"Upload successful!\",\n        description: \"Your file has been uploaded securely.\",\n      });\n      onUploadSuccess?.();\n      setUploadProgress(0);\n    },\n    onError: (error: Error) => {\n      setError(error.message);\n      setUploadProgress(0);\n    },\n  });\n\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    setError(null);\n    \n    if (acceptedFiles.length === 0) {\n      setError(\"No valid files selected\");\n      return;\n    }\n\n    const file = acceptedFiles[0];\n    \n    // Simulate upload progress\n    setUploadProgress(0);\n    const progressInterval = setInterval(() => {\n      setUploadProgress((prev) => {\n        if (prev >= 90) {\n          clearInterval(progressInterval);\n          return 90;\n        }\n        return prev + 10;\n      });\n    }, 100);\n\n    uploadMutation.mutate(file);\n\n    // Clear progress interval when upload completes\n    setTimeout(() => {\n      clearInterval(progressInterval);\n      setUploadProgress(100);\n    }, 2000);\n  }, [uploadMutation]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    multiple: false,\n    maxSize: 10 * 1024 * 1024, // 10MB\n    onDropRejected: (rejectedFiles: any[]) => {\n      const rejection = rejectedFiles[0];\n      if (rejection.errors[0]?.code === \"file-too-large\") {\n        setError(\"File is too large. Maximum size is 10MB.\");\n      } else {\n        setError(\"File was rejected. Please try a different file.\");\n      }\n    },\n  });\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <h4 className=\"text-lg font-semibold text-slate-900 mb-4 flex items-center\">\n          <Upload className=\"text-primary mr-2\" />\n          Upload Files\n        </h4>\n\n        <div\n          {...getRootProps()}\n          className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${\n            isDragActive \n              ? \"border-primary bg-primary/5\" \n              : \"border-slate-300 hover:border-primary/40\"\n          }`}\n        >\n          <input {...getInputProps()} />\n          <Upload className=\"h-12 w-12 text-slate-400 mx-auto mb-4\" />\n          {isDragActive ? (\n            <p className=\"text-slate-600 mb-2\">Drop the file here...</p>\n          ) : (\n            <>\n              <p className=\"text-slate-600 mb-2\">Click to upload files or drag and drop</p>\n              <p className=\"text-sm text-slate-500\">Supports multiple file formats (max 10MB)</p>\n            </>\n          )}\n        </div>\n\n        {uploadProgress > 0 && uploadProgress < 100 && (\n          <div className=\"mt-4\">\n            <div className=\"flex justify-between text-sm text-slate-600 mb-2\">\n              <span>Uploading...</span>\n              <span>{uploadProgress}%</span>\n            </div>\n            <Progress value={uploadProgress} className=\"w-full\" />\n          </div>\n        )}\n\n        {error && (\n          <Alert variant=\"destructive\" className=\"mt-4\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        <div className=\"mt-4 flex justify-between items-center\">\n          <div className=\"text-sm text-slate-500 flex items-center\">\n            <File className=\"h-4 w-4 mr-1\" />\n            Files are secured with your JWT token\n          </div>\n          <Button \n            onClick={() => (document.querySelector('input[type=\"file\"]') as HTMLInputElement)?.click()}\n            disabled={uploadMutation.isPending}\n            size=\"sm\"\n          >\n            <Upload className=\"h-4 w-4 mr-1\" />\n            Add Files\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5117},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  );\n}\n\nexport { Skeleton };","size_bytes":263},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/auth.ts":{"content":"import bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport { db } from './db';\nimport { insertUserSchema } from '@shared/schema';\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\n\n// Password-based registration\nexport async function registerUser(username: string, password: string) {\n  // Validate input\n  const validatedData = insertUserSchema.parse({ username, password });\n  \n  // Check if user already exists\n  const existingUser = await db.user.findUnique({\n    where: { username: validatedData.username }\n  });\n  \n  if (existingUser) {\n    throw new Error(\"Username already exists\");\n  }\n  \n  // Hash password\n  const hashedPassword = await bcrypt.hash(validatedData.password, 12);\n  \n  // Create user\n  const user = await db.user.create({\n    data: { \n      username: validatedData.username, \n      password: hashedPassword \n    }\n  });\n  \n  // Generate JWT token\n  const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: \"24h\" });\n  \n  return { \n    token, \n    user: { \n      id: user.id, \n      username: user.username \n    } \n  };\n}\n\n// Password-based login\nexport async function loginUser(username: string, password: string) {\n  const user = await db.user.findUnique({\n    where: { username }\n  });\n  \n  if (!user) {\n    throw new Error(\"User not found\");\n  }\n  \n  // Verify password\n  const isValidPassword = await bcrypt.compare(password, user.password);\n  \n  if (!isValidPassword) {\n    throw new Error(\"Invalid password\");\n  }\n  \n  // Generate JWT token\n  const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: \"24h\" });\n  \n  return { \n    token, \n    user: { \n      id: user.id, \n      username: user.username \n    } \n  };\n}\n\n// JWT middleware\nexport function authenticateJWT(req: any, res: any, next: any) {\n  const authHeader = req.headers.authorization;\n  \n  if (authHeader) {\n    const token = authHeader.split(' ')[1];\n    \n    try {\n      const decoded = jwt.verify(token, JWT_SECRET) as any;\n      req.user = { id: decoded.userId };\n      next();\n    } catch (error) {\n      res.status(403).json({ error: \"Invalid token\" });\n    }\n  } else {\n    res.status(401).json({ error: \"No token provided\" });\n  }\n}","size_bytes":2181},"server/routes-old.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { db } from \"./db\";\nimport { PromiseCrypto } from \"./crypto\";\nimport { WebAuthnPromiseService } from \"./webauthn-promise\";\nimport { registerUser, loginUser, authenticateJWT } from \"./auth\";\nimport crypto from \"crypto\";\nimport { insertUserSchema, insertPromiseSchema, promiseShareSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // WebAuthn Registration - Generate Options\n  app.post(\"/api/auth/register/options\", async (req, res) => {\n    try {\n      const { username, role } = req.body;\n      \n      // Validate input\n      const validatedData = insertUserSchema.parse({ username, role });\n      \n      // Check if user already exists\n      const existingUser = await db.user.findUnique({\n        where: { username: validatedData.username }\n      });\n      \n      if (existingUser) {\n        return res.status(400).json({ error: \"Username already exists\" });\n      }\n      \n      const options = await generateRegistrationOptions({\n        rpName: RP_NAME,\n        rpID: RP_ID,\n        userID: new TextEncoder().encode(validatedData.username),\n        userName: validatedData.username,\n        userDisplayName: validatedData.username,\n        attestationType: \"none\",\n        authenticatorSelection: {\n          authenticatorAttachment: \"platform\",\n          userVerification: \"required\",\n        },\n        supportedAlgorithmIDs: [-7, -257],\n      });\n      \n      // Store challenge\n      challenges.set(validatedData.username, options.challenge);\n      \n      res.json(options);\n    } catch (error) {\n      console.error(\"Registration options error:\", error);\n      res.status(400).json({ error: \"Invalid registration data\" });\n    }\n  });\n\n  // WebAuthn Registration - Verify Response\n  app.post(\"/api/auth/register/verify\", async (req, res) => {\n    try {\n      const { username, role, credential } = req.body;\n      \n      const expectedChallenge = challenges.get(username);\n      if (!expectedChallenge) {\n        return res.status(400).json({ error: \"No challenge found for user\" });\n      }\n      \n      const verification: VerifiedRegistrationResponse = await verifyRegistrationResponse({\n        response: credential,\n        expectedChallenge,\n        expectedOrigin: ORIGIN,\n        expectedRPID: RP_ID,\n      });\n      \n      if (verification.verified && verification.registrationInfo) {\n        // Create user\n        const user = await db.user.create({\n          data: { username, role }\n        });\n        \n        // Store credential\n        await db.credential.create({\n          data: {\n            id: verification.registrationInfo.credential.id,\n            userId: user.id,\n            publicKey: Buffer.from(verification.registrationInfo.credential.publicKey).toString('base64'),\n            counter: verification.registrationInfo.credential.counter,\n          }\n        });\n        \n        // Generate JWT token\n        const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: \"24h\" });\n        \n        // Clean up challenge\n        challenges.delete(username);\n        \n        res.json({ verified: true, token, user: { id: user.id, username: user.username, role: user.role } });\n      } else {\n        res.status(400).json({ error: \"Registration verification failed\" });\n      }\n    } catch (error) {\n      console.error(\"Registration verification error:\", error);\n      res.status(400).json({ error: \"Registration verification failed\" });\n    }\n  });\n\n  // WebAuthn Login - Generate Options\n  app.post(\"/api/auth/login/options\", async (req, res) => {\n    try {\n      const { username } = req.body;\n      \n      const user = await db.user.findUnique({\n        where: { username }\n      });\n      \n      if (!user) {\n        return res.status(400).json({ error: \"User not found\" });\n      }\n      \n      const userCredentials = await db.credential.findMany({\n        where: { userId: user.id }\n      });\n      \n      const allowCredentials = userCredentials.map(cred => ({\n        id: cred.id,\n        type: \"public-key\" as const,\n      }));\n      \n      const options = await generateAuthenticationOptions({\n        rpID: RP_ID,\n        allowCredentials,\n        userVerification: \"required\",\n      });\n      \n      // Store challenge\n      challenges.set(username, options.challenge);\n      \n      res.json(options);\n    } catch (error) {\n      console.error(\"Login options error:\", error);\n      res.status(400).json({ error: \"Failed to generate login options\" });\n    }\n  });\n\n  // WebAuthn Login - Verify Response\n  app.post(\"/api/auth/login/verify\", async (req, res) => {\n    try {\n      const { username, credential } = req.body;\n      \n      const expectedChallenge = challenges.get(username);\n      if (!expectedChallenge) {\n        return res.status(400).json({ error: \"No challenge found for user\" });\n      }\n      \n      const user = await db.user.findUnique({\n        where: { username }\n      });\n      \n      if (!user) {\n        return res.status(400).json({ error: \"User not found\" });\n      }\n      \n      const dbCredential = await db.credential.findUnique({\n        where: { id: credential.id }\n      });\n      \n      if (!dbCredential || dbCredential.userId !== user.id) {\n        return res.status(400).json({ error: \"Credential not found\" });\n      }\n      \n      const verification: VerifiedAuthenticationResponse = await verifyAuthenticationResponse({\n        response: credential,\n        expectedChallenge,\n        expectedOrigin: ORIGIN,\n        expectedRPID: RP_ID,\n        credential: {\n          id: dbCredential.id,\n          publicKey: Buffer.from(dbCredential.publicKey, 'base64'),\n          counter: dbCredential.counter,\n        },\n      });\n      \n      if (verification.verified) {\n        // Update counter\n        await db.credential.update({\n          where: { id: dbCredential.id },\n          data: { counter: verification.authenticationInfo.newCounter }\n        });\n        \n        // Generate JWT token\n        const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: \"24h\" });\n        \n        // Clean up challenge\n        challenges.delete(username);\n        \n        res.json({ verified: true, token, user: { id: user.id, username: user.username, role: user.role } });\n      } else {\n        res.status(400).json({ error: \"Authentication verification failed\" });\n      }\n    } catch (error) {\n      console.error(\"Login verification error:\", error);\n      res.status(400).json({ error: \"Authentication verification failed\" });\n    }\n  });\n\n  // Create Promise\n  app.post(\"/api/promises\", authenticateJWT, async (req: any, res) => {\n    try {\n      const promiseData = insertPromiseSchema.parse(req.body);\n      \n      // Generate key pair for this promise\n      const keyPair = PromiseCrypto.generateKeyPair();\n      \n      // Create fingerprint data from WebAuthn credential\n      const fingerprintData = `${req.user.id}-${Date.now()}-${crypto.randomBytes(16).toString('hex')}`;\n      const hashedFingerprint = PromiseCrypto.hashFingerprint(fingerprintData);\n      \n      // Encrypt promise with content + private key + fingerprint\n      const encryptedData = PromiseCrypto.encryptPromise(\n        promiseData.content,\n        keyPair.privateKey,\n        fingerprintData\n      );\n      \n      const promise = await db.promise.create({\n        data: {\n          title: promiseData.title,\n          content: promiseData.content,\n          metadata: promiseData.metadata,\n          encryptedData,\n          fingerprint: hashedFingerprint,\n          deliveryDate: promiseData.deliveryDate,\n          recipientId: promiseData.recipientId,\n          creatorId: req.user.id,\n        },\n        include: {\n          creator: true,\n        }\n      });\n      \n      // Generate certificate\n      const certificate = PromiseCrypto.generateCertificate(\n        promise.id,\n        keyPair.publicKey,\n        hashedFingerprint\n      );\n      \n      await db.promiseCertificate.create({\n        data: {\n          promiseId: promise.id,\n          certificate,\n          publicKey: keyPair.publicKey,\n        }\n      });\n      \n      // Generate signing challenge for WebAuthn\n      const signingChallenge = WebAuthnPromiseService.generateSigningChallenge({\n        id: promise.id,\n        title: promise.title,\n        content: promise.content,\n        deliveryDate: promise.deliveryDate.toISOString(),\n        creatorId: promise.creatorId\n      });\n\n      res.json({ \n        promise, \n        certificate,\n        signingChallenge,\n        requiresWebAuthnSigning: true\n      });\n    } catch (error) {\n      console.error(\"Promise creation error:\", error);\n      res.status(400).json({ error: \"Failed to create promise\" });\n    }\n  });\n\n  // Share Promise\n  app.post(\"/api/promises/:id/share\", authenticateJWT, async (req: any, res) => {\n    try {\n      const { userIds } = promiseShareSchema.parse(req.body);\n      const promiseId = req.params.id;\n      \n      // Check if promise exists and user owns it\n      const promise = await db.promise.findFirst({\n        where: {\n          id: promiseId,\n          creatorId: req.user.id,\n        }\n      });\n      \n      if (!promise) {\n        return res.status(404).json({ error: \"Promise not found or access denied\" });\n      }\n      \n      // Create shares for each user\n      const shares = await globalThis.Promise.all(\n        userIds.map(userId =>\n          db.promiseShare.upsert({\n            where: {\n              promiseId_userId: {\n                promiseId,\n                userId,\n              }\n            },\n            update: {},\n            create: {\n              promiseId,\n              userId,\n              canValidate: true,\n            }\n          })\n        )\n      );\n      \n      res.json({ shares });\n    } catch (error) {\n      console.error(\"Promise share error:\", error);\n      res.status(400).json({ error: \"Failed to share promise\" });\n    }\n  });\n\n  // Sign Promise with WebAuthn (for downloadable file)\n  app.post(\"/api/promises/:id/sign\", authenticateJWT, async (req: any, res) => {\n    try {\n      const promiseId = req.params.id;\n      const { signature, publicKey } = req.body;\n\n      // Get promise with creator details\n      const promise = await db.promise.findFirst({\n        where: {\n          id: promiseId,\n          creatorId: req.user.id,\n        },\n        include: {\n          creator: true,\n        }\n      });\n\n      if (!promise) {\n        return res.status(404).json({ error: \"Promise not found or access denied\" });\n      }\n\n      // Generate challenge for this specific promise\n      const challenge = WebAuthnPromiseService.generateSigningChallenge({\n        id: promise.id,\n        title: promise.title,\n        content: promise.content,\n        deliveryDate: promise.deliveryDate.toISOString(),\n        creatorId: promise.creatorId\n      });\n\n      // Create signed promise file\n      const signedPromise = WebAuthnPromiseService.createSignedPromiseFile(\n        promise,\n        signature,\n        publicKey,\n        challenge\n      );\n\n      res.json({ \n        signedPromise,\n        downloadFileName: `promise-${promise.title.replace(/[^a-zA-Z0-9]/g, '_')}-${promise.id}.json`\n      });\n    } catch (error) {\n      console.error(\"Promise signing error:\", error);\n      res.status(400).json({ error: \"Failed to sign promise\" });\n    }\n  });\n\n  // Verify Promise File (standalone verification)\n  app.post(\"/api/verify-promise\", async (req, res) => {\n    try {\n      const { signedPromise } = req.body;\n\n      if (!signedPromise) {\n        return res.status(400).json({ error: \"No signed promise provided\" });\n      }\n\n      const verificationResult = await WebAuthnPromiseService.verifySignedPromise(signedPromise);\n\n      res.json({\n        verification: verificationResult,\n        promise: {\n          id: signedPromise.id,\n          title: signedPromise.title,\n          creator: signedPromise.creator.username,\n          deliveryDate: signedPromise.deliveryDate,\n          createdAt: signedPromise.createdAt,\n        }\n      });\n    } catch (error) {\n      console.error(\"Promise verification error:\", error);\n      res.status(400).json({ error: \"Failed to verify promise\" });\n    }\n  });\n\n  // Get Promises\n  app.get(\"/api/promises\", authenticateJWT, async (req: any, res) => {\n    try {\n      let promises;\n      \n      if (req.user.role === \"admin\") {\n        // Admin can see all promises\n        promises = await db.promise.findMany({\n          include: {\n            creator: true,\n            shares: {\n              include: {\n                user: true,\n              }\n            },\n            certificates: true,\n          },\n          orderBy: {\n            createdAt: 'desc',\n          }\n        });\n      } else {\n        // Regular users can see their own promises and shared promises\n        promises = await db.promise.findMany({\n          where: {\n            OR: [\n              { creatorId: req.user.id },\n              {\n                shares: {\n                  some: {\n                    userId: req.user.id,\n                  }\n                }\n              }\n            ]\n          },\n          include: {\n            creator: true,\n            shares: {\n              include: {\n                user: true,\n              }\n            },\n            certificates: true,\n          },\n          orderBy: {\n            createdAt: 'desc',\n          }\n        });\n      }\n      \n      res.json({ promises });\n    } catch (error) {\n      console.error(\"Get promises error:\", error);\n      res.status(500).json({ error: \"Failed to get promises\" });\n    }\n  });\n\n  // Validate Promise Certificate\n  app.post(\"/api/promises/:id/validate\", authenticateJWT, async (req: any, res) => {\n    try {\n      const promiseId = req.params.id;\n      \n      const promise = await db.promise.findUnique({\n        where: { id: promiseId },\n        include: {\n          certificates: true,\n          creator: true,\n        }\n      });\n      \n      if (!promise) {\n        return res.status(404).json({ error: \"Promise not found\" });\n      }\n      \n      const certificate = promise.certificates[0];\n      if (!certificate) {\n        return res.status(404).json({ error: \"Certificate not found\" });\n      }\n      \n      const isValid = PromiseCrypto.validateCertificate(\n        certificate.certificate,\n        certificate.publicKey\n      );\n      \n      let decryptedData = null;\n      if (req.user.id === promise.creatorId && isValid) {\n        try {\n          decryptedData = PromiseCrypto.decryptPromise(promise.encryptedData);\n        } catch (error) {\n          console.error(\"Decryption error:\", error);\n        }\n      }\n      \n      res.json({\n        isValid,\n        promise: {\n          id: promise.id,\n          title: promise.title,\n          creator: promise.creator.username,\n          deliveryDate: promise.deliveryDate,\n          createdAt: promise.createdAt,\n        },\n        decryptedData: req.user.id === promise.creatorId ? decryptedData : null,\n      });\n    } catch (error) {\n      console.error(\"Certificate validation error:\", error);\n      res.status(500).json({ error: \"Failed to validate certificate\" });\n    }\n  });\n\n  // Get Current User\n  app.get(\"/api/auth/me\", authenticateJWT, async (req: any, res) => {\n    res.json({ user: req.user });\n  });\n\n  // Admin Stats\n  app.get(\"/api/admin/stats\", authenticateJWT, async (req: any, res) => {\n    try {\n      if (req.user.role !== \"admin\") {\n        return res.status(403).json({ error: \"Admin access required\" });\n      }\n      \n      const [totalUsers, totalPromises, totalShares] = await globalThis.Promise.all([\n        db.user.count(),\n        db.promise.count(),\n        db.promiseShare.count(),\n      ]);\n      \n      res.json({\n        totalUsers,\n        totalPromises,\n        totalShares,\n      });\n    } catch (error) {\n      console.error(\"Admin stats error:\", error);\n      res.status(500).json({ error: \"Failed to get stats\" });\n    }\n  });\n\n  // Get All Users (for sharing)\n  app.get(\"/api/users\", authenticateJWT, async (req: any, res) => {\n    try {\n      const users = await db.user.findMany({\n        where: {\n          id: {\n            not: req.user.id, // Exclude current user\n          }\n        },\n        select: {\n          id: true,\n          username: true,\n          role: true,\n        },\n        orderBy: {\n          username: 'asc',\n        }\n      });\n      \n      res.json({ users });\n    } catch (error) {\n      console.error(\"Get users error:\", error);\n      res.status(500).json({ error: \"Failed to get users\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":16678}}}